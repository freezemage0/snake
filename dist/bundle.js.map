{"version":3,"file":"./bundle.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;UCVA;UACA;;;;;WCDA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;;;ACdf;AACP;AACA;AACA;AACA,CAAC;;;ACJyC;AACR;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA,gEAAgE,MAAM;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;ACtED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA,mEAAmE,wBAAwB;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACwB;;;AC3ES;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,MAAM;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgB;;;ACnBjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgB;;;ACrBe;AACQ;AACR;AACU;AACR;AACF;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK,eAAe,SAAS;AACtD,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,MAAM;AAC7D,wBAAwB,OAAO;AAC/B,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA,4BAA4B,SAAS;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD,cAAc,qDAAqD,mDAAmD;AACtH,6BAA6B,KAAK;AAClC;AACA;AACA,0DAA0D,QAAQ,uGAAuG;AACzK,2DAA2D,MAAM;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE,oEAAoE;AACpI,SAAS;AACT;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA,wBAAwB,UAAU;AAClC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;;;ACxIlB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;AACjB;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AC3CkC;AACsB;AACjD;AACP,YAAY,MAAM;AAClB,kBAAkB,YAAY;AAC9B,cAAc,QAAQ;AACtB","sources":["webpack://freezemage0.snake/webpack/universalModuleDefinition","webpack://freezemage0.snake/webpack/bootstrap","webpack://freezemage0.snake/webpack/runtime/define property getters","webpack://freezemage0.snake/webpack/runtime/hasOwnProperty shorthand","webpack://freezemage0.snake/webpack/runtime/make namespace object","webpack://freezemage0.snake/./src/coordinate.ts","webpack://freezemage0.snake/./src/colors.ts","webpack://freezemage0.snake/./src/snake.ts","webpack://freezemage0.snake/./src/direction.ts","webpack://freezemage0.snake/./src/fruit.ts","webpack://freezemage0.snake/./src/score.ts","webpack://freezemage0.snake/./src/engine.ts","webpack://freezemage0.snake/./src/localization.ts","webpack://freezemage0.snake/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var Coordinate = /** @class */ (function () {\n    function Coordinate(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    Coordinate.prototype.equals = function (coordinate) {\n        return (this.x === coordinate.x &&\n            this.y === coordinate.y);\n    };\n    Coordinate.prototype.move = function (direction) {\n        return new Coordinate(this.x + direction.x, this.y + direction.y);\n    };\n    return Coordinate;\n}());\nexport { Coordinate };\n","export var Colors = Object.freeze({\n    SNAKE_HEAD: 'red',\n    SNAKE_BODY: 'orange',\n    FRUIT: 'green'\n});\n","import { Coordinate } from \"./coordinate\";\nimport { Colors } from \"./colors\";\nvar Snake = /** @class */ (function () {\n    function Snake(context, direction) {\n        this.segments = [];\n        this.lastSegment = null;\n        this.context = context;\n        this.direction = direction;\n    }\n    Snake.prototype.update = function () {\n        var _this = this;\n        this.segments.forEach(function (segment) {\n            segment.clear();\n        });\n        var trail;\n        var previousTrail;\n        this.segments.forEach(function (segment) {\n            if (!!trail) {\n                trail = segment.position;\n                segment.move(previousTrail);\n                previousTrail = trail;\n            }\n            else {\n                previousTrail = segment.position;\n                segment.move(segment.position.move(_this.direction));\n                trail = segment.position;\n            }\n            segment.render();\n        });\n    };\n    Snake.prototype.createSegment = function (color) {\n        var position;\n        if (this.lastSegment) {\n            position = this.lastSegment.position.move(this.direction.reverse());\n        }\n        else {\n            position = new Coordinate(300 / 2, 150 / 2);\n        }\n        return new Segment(this.context, position, 13, color || Colors.SNAKE_BODY);\n    };\n    Snake.prototype.addSegment = function (segment) {\n        this.segments.push(segment);\n        this.lastSegment = segment;\n    };\n    Snake.prototype.resetSegments = function () {\n        this.segments = [];\n        this.lastSegment = null;\n    };\n    return Snake;\n}());\nexport { Snake };\nvar Segment = /** @class */ (function () {\n    function Segment(context, position, size, color) {\n        this.context = context;\n        this.position = position;\n        this.size = size;\n        this.color = color;\n    }\n    Segment.prototype.move = function (position) {\n        this.position = position;\n    };\n    Segment.prototype.clear = function () {\n        this.context.fillStyle = 'white';\n        this.context.fillRect(this.position.x + 1, this.position.y + 1, this.size, this.size);\n    };\n    Segment.prototype.render = function () {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(this.position.x + 1, this.position.y + 1, this.size, this.size);\n    };\n    return Segment;\n}());\n","var Direction = /** @class */ (function () {\n    function Direction(type, x, y) {\n        this.type = type;\n        this.x = x;\n        this.y = y;\n        Direction.cache.set(type, this);\n    }\n    Direction.get = function (type) {\n        var direction = Direction.cache.get(type);\n        if (!direction) {\n            throw new TypeError('Unknown direction type.');\n        }\n        return direction;\n    };\n    Direction.right = function () {\n        if (Direction.cache.has(DirectionType.RIGHT)) {\n            return Direction.get(DirectionType.RIGHT);\n        }\n        return new Direction(DirectionType.RIGHT, 15, 0);\n    };\n    Direction.left = function () {\n        if (Direction.cache.has(DirectionType.LEFT)) {\n            return Direction.get(DirectionType.LEFT);\n        }\n        return new Direction(DirectionType.LEFT, -15, 0);\n    };\n    Direction.up = function () {\n        if (Direction.cache.has(DirectionType.UP)) {\n            return Direction.get(DirectionType.UP);\n        }\n        return new Direction(DirectionType.UP, 0, -15);\n    };\n    Direction.down = function () {\n        if (Direction.cache.has(DirectionType.DOWN)) {\n            return Direction.get(DirectionType.DOWN);\n        }\n        return new Direction(DirectionType.DOWN, 0, 15);\n    };\n    Direction.prototype.reverse = function () {\n        if (!Direction.reverseMap) {\n            Direction.reverseMap = new Map([\n                [DirectionType.LEFT, Direction.right],\n                [DirectionType.RIGHT, Direction.left],\n                [DirectionType.UP, Direction.down],\n                [DirectionType.DOWN, Direction.up],\n            ]);\n        }\n        var reverseDirection = Direction.reverseMap.get(this.type);\n        if (!reverseDirection) {\n            throw new Error('Direction has no reverse (?)');\n        }\n        return reverseDirection.call(Direction);\n    };\n    Direction.prototype.equals = function (direction) {\n        return this === direction;\n    };\n    Direction.prototype.isReverse = function (direction) {\n        return this.reverse() === direction;\n    };\n    Direction.cache = new Map();\n    return Direction;\n}());\nexport { Direction };\nvar DirectionType = /** @class */ (function () {\n    function DirectionType() {\n    }\n    DirectionType.isType = function (value) {\n        return Object.values(DirectionType).some(function (type) { return type === value; });\n    };\n    DirectionType.LEFT = 'left';\n    DirectionType.RIGHT = 'right';\n    DirectionType.UP = 'up';\n    DirectionType.DOWN = 'down';\n    return DirectionType;\n}());\nexport { DirectionType };\n","import { Colors } from \"./colors\";\nvar Fruit = /** @class */ (function () {\n    function Fruit(context, position) {\n        this.context = context;\n        this.position = position;\n    }\n    Fruit.prototype.render = function () {\n        this.context.fillStyle = Colors.FRUIT;\n        this.context.fillRect(this.position.x + 1, this.position.y + 1, 13, 13);\n    };\n    Fruit.prototype.clear = function () {\n        this.context.fillStyle = 'white';\n        this.context.fillRect(this.position.x + 1, this.position.y + 1, 13, 13);\n    };\n    Fruit.prototype.collidesWith = function (position) {\n        return this.position.equals(position);\n    };\n    return Fruit;\n}());\nexport { Fruit };\n","var Score = /** @class */ (function () {\n    function Score(node, value) {\n        this.node = node;\n        this.value = value;\n    }\n    Score.prototype.increment = function () {\n        this.value += 1;\n        this.update();\n    };\n    Score.prototype.getValue = function () {\n        return this.value;\n    };\n    Score.prototype.update = function () {\n        this.node.innerHTML = this.value.toString();\n    };\n    Score.prototype.reset = function () {\n        this.value = 0;\n        this.update();\n    };\n    return Score;\n}());\nexport { Score };\n","import { Snake } from \"./snake\";\nimport { Direction } from \"./direction\";\nimport { Fruit } from \"./fruit\";\nimport { Coordinate } from \"./coordinate\";\nimport { Colors } from \"./colors\";\nimport { Score } from \"./score\";\nvar Engine = /** @class */ (function () {\n    function Engine(canvas, score, highScore, localization) {\n        this.fruit = null;\n        this.speed = 8;\n        this.inputQueue = [];\n        var context = canvas.getContext('2d');\n        if (!context) {\n            throw new Error('Failed to acquire canvas context.');\n        }\n        this.context = context;\n        this.highScore = highScore;\n        this.localization = localization;\n        this.snake = new Snake(this.context, Direction.right());\n        this.score = new Score(score, 0);\n    }\n    Engine.prototype.initialize = function (speed) {\n        window.focus();\n        this.speed = speed;\n        this.fruit = null;\n        this.context.reset();\n        this.score.reset();\n        this.snake.resetSegments();\n        this.snake.addSegment(this.snake.createSegment(Colors.SNAKE_HEAD));\n        for (var i = 0; i < 2; i += 1) {\n            this.snake.addSegment(this.snake.createSegment(Colors.SNAKE_BODY));\n        }\n        this.renderField();\n    };\n    Engine.prototype.run = function () {\n        window.addEventListener('keydown', this.update.bind(this));\n        this.tickerId = window.setInterval(this.tick.bind(this), 1000 / this.speed);\n    };\n    Engine.prototype.stop = function () {\n        window.removeEventListener('keydown', this.update.bind(this));\n        window.clearInterval(this.tickerId);\n    };\n    Engine.prototype.update = function (event) {\n        var currentDirection = this.inputQueue.at(-1) || this.snake.direction;\n        var direction;\n        switch (event.key.toLowerCase()) {\n            case 'w':\n            case 'ц':\n                direction = Direction.up();\n                break;\n            case 'a':\n            case 'ф':\n                direction = Direction.left();\n                break;\n            case 's':\n            case 'ы':\n                direction = Direction.down();\n                break;\n            case 'd':\n            case 'в':\n                direction = Direction.right();\n                break;\n            default:\n                return;\n        }\n        if (direction.equals(currentDirection) || direction.isReverse(currentDirection)) {\n            return;\n        }\n        this.inputQueue.push(direction);\n    };\n    Engine.prototype.tick = function () {\n        var _this = this;\n        if (this.inputQueue.length > 0) {\n            var direction = this.inputQueue.shift();\n            if (direction) {\n                this.snake.direction = direction;\n            }\n        }\n        this.snake.update();\n        if (this.checkCollision()) {\n            var retry = confirm('Game Over. Retry?');\n            var highScoreEntry = document.createElement('tr');\n            var highScoreDate = document.createElement('td');\n            highScoreDate.innerHTML = this.localization.formatDate(new Date());\n            var highScoreValue = document.createElement('td');\n            highScoreValue.innerHTML = this.score.getValue().toString();\n            highScoreEntry.appendChild(highScoreDate);\n            highScoreEntry.appendChild(highScoreValue);\n            this.highScore.appendChild(highScoreEntry);\n            if (!retry) {\n                window.clearInterval(this.tickerId);\n                return;\n            }\n            this.initialize(this.speed);\n        }\n        if (!this.fruit) {\n            var randomPosition_1;\n            do {\n                randomPosition_1 = new Coordinate(Math.max(Math.round(Math.random() * 19) * 15, 15), Math.max(Math.round(Math.random() * 9) * 15, 15));\n            } while (this.snake.segments.some(function (segment) { return randomPosition_1.equals(segment.position); }));\n            this.fruit = new Fruit(this.context, randomPosition_1);\n            this.fruit.render();\n        }\n        if (this.snake.segments.some(function (segment) { var _a; return !!((_a = _this.fruit) === null || _a === void 0 ? void 0 : _a.collidesWith(segment.position)); })) {\n            this.snake.addSegment(this.snake.createSegment(Colors.SNAKE_BODY));\n            this.score.increment();\n            this.fruit = null;\n        }\n    };\n    Engine.prototype.checkCollision = function () {\n        var _this = this;\n        return this.snake.segments.some(function (segment) {\n            if (segment.position.x < 0 || segment.position.x >= 300) {\n                return true;\n            }\n            if (segment.position.y < 0 || segment.position.y >= 150) {\n                return true;\n            }\n            return _this.snake.segments.some(function (other) { return (segment !== other && segment.position === other.position); });\n        });\n    };\n    Engine.prototype.renderField = function () {\n        this.context.beginPath();\n        for (var x = 0; x <= 300; x += 15) {\n            this.context.moveTo(x, 0);\n            this.context.lineTo(x, 150);\n            this.context.stroke();\n        }\n        for (var y = 0; y <= 150; y += 15) {\n            this.context.moveTo(0, y);\n            this.context.lineTo(300, y);\n            this.context.stroke();\n        }\n    };\n    return Engine;\n}());\nexport { Engine };\n","var Localization = /** @class */ (function () {\n    function Localization(dictionary) {\n        this.locale = new Intl.Locale(navigator.language);\n        this.dateFormatter = new Intl.DateTimeFormat(this.locale.maximize().language, {\n            dateStyle: 'medium',\n            timeStyle: 'medium',\n        });\n        this.dictionary = dictionary;\n    }\n    Localization.prototype.getMessage = function (code) {\n        var info = this.locale.maximize();\n        if (!this.dictionary.has(info.language)) {\n            return code;\n        }\n        var locales = this.dictionary.get(info.language);\n        if (!locales || !locales.has(code)) {\n            return code;\n        }\n        return locales.get(code);\n    };\n    Localization.prototype.formatDate = function (date) {\n        return this.dateFormatter.format(date);\n    };\n    return Localization;\n}());\nexport { Localization };\nexport var Messages = new Map([\n    ['en', new Map([\n            ['SCORE', 'Score'],\n            ['SPEED', 'Speed'],\n            ['ATTEMPTS', 'Attempts'],\n            ['SETTINGS', 'Settings'],\n            ['START', 'Start'],\n            ['DATE', 'Date'],\n        ])],\n    ['ru', new Map([\n            ['SCORE', 'Очки'],\n            ['SPEED', 'Скорость'],\n            ['ATTEMPTS', 'Попытки'],\n            ['SETTINGS', 'Настройки'],\n            ['START', 'Начать'],\n            ['DATE', 'Дата'],\n        ])]\n]);\n","import { Engine } from './engine';\nimport { Localization, Messages } from \"./localization\";\nexport var Freezemage = {\n    Engine: Engine,\n    Localization: Localization,\n    Messages: Messages\n};\n"],"names":[],"sourceRoot":""}