{"version":3,"file":"./bundle.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;UCVA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA;WACA,sDAAsD;WACtD,sCAAsC,iEAAiE;WACvG;WACA;WACA;WACA;WACA;WACA;;;;;WCzBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACqB;;;ACdoB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AC1ED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACoB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,sCAAsC;;;ACrEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgB;;;ACfjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACgB;;;ACrBe;AACQ;AACR;AACU;AACV;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,KAAK,eAAe,SAAS;AACtD,yBAAyB,KAAK;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,SAAS;AACxC;AACA;AACA,wBAAwB,OAAO;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,UAAU;AACjD,cAAc,qDAAqD,mDAAmD;AACtH,6BAA6B,KAAK;AAClC;AACA;AACA,0DAA0D,QAAQ,uGAAuG;AACzK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEAAgE;AAChE,2DAA2D;AAC3D,SAAS;AACT;AACA;AACA;AACA;AACA,iDAAiD,kCAAkC;AACnF;AACA;AACA;AACA;AACA,+CAA+C,gCAAgC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2EAA2E,mBAAmB;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA,wBAAwB,SAAS;AACjC;AACA;AACA,yEAAyE,wBAAwB;AACjG;AACA,qBAAqB,SAAS;AAC9B,qBAAqB,SAAS;AAC9B,qBAAqB,SAAS;AAC9B,qBAAqB,SAAS;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACiB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,4BAA4B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,oCAAoC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,SAAS;AACvC,gCAAgC,SAAS;AACzC,iCAAiC,SAAS;AAC1C,gCAAgC,SAAS;AACzC;AACA;AACA,CAAC;;;;;;AC3MuD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,uBAAuB,6BAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,EAAE,MAAM,4BAA4B,8BAA8B;AACnI,aAAa;AACb;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACuB;;;AC7CxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACmB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;ACpBD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C,kCAAkC;AAC7E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,2CAA2C,kCAAkC;AAC7E;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,CAAC;AACkB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;;AC9FiC;AACY;AACR;AACF;AAC7B;AACP,YAAY,MAAM;AAClB,kBAAkB,YAAY;AAC9B,cAAc,QAAQ;AACtB,aAAa,OAAO;AACpB","sources":["webpack://freezemage0.snake/webpack/universalModuleDefinition","webpack://freezemage0.snake/webpack/bootstrap","webpack://freezemage0.snake/webpack/runtime/create fake namespace object","webpack://freezemage0.snake/webpack/runtime/define property getters","webpack://freezemage0.snake/webpack/runtime/hasOwnProperty shorthand","webpack://freezemage0.snake/webpack/runtime/make namespace object","webpack://freezemage0.snake/./src/coordinate.ts","webpack://freezemage0.snake/./src/snake.ts","webpack://freezemage0.snake/./src/direction.ts","webpack://freezemage0.snake/./src/fruit.ts","webpack://freezemage0.snake/./src/score.ts","webpack://freezemage0.snake/./src/engine.ts","webpack://freezemage0.snake/./src/localization.ts","webpack://freezemage0.snake/./src/settings.ts","webpack://freezemage0.snake/./src/history.ts","webpack://freezemage0.snake/./src/index.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(self, () => {\nreturn ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var Coordinate = /** @class */ (function () {\n    function Coordinate(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    Coordinate.prototype.equals = function (coordinate) {\n        return (this.x === coordinate.x &&\n            this.y === coordinate.y);\n    };\n    Coordinate.prototype.move = function (direction) {\n        return new Coordinate(this.x + direction.x, this.y + direction.y);\n    };\n    return Coordinate;\n}());\nexport { Coordinate };\n","import { Coordinate } from \"./coordinate\";\nvar Snake = /** @class */ (function () {\n    function Snake(context, direction) {\n        this.context = context;\n        this.direction = direction;\n        this.segments = [];\n        this.lastSegment = null;\n    }\n    Snake.prototype.update = function () {\n        var _this = this;\n        this.segments.forEach(function (segment) {\n            segment.clear();\n        });\n        var trail;\n        var previousTrail;\n        this.segments.forEach(function (segment) {\n            if (!!trail) {\n                trail = segment.position;\n                segment.move(previousTrail);\n                previousTrail = trail;\n            }\n            else {\n                previousTrail = segment.position;\n                segment.move(segment.position.move(_this.direction));\n                trail = segment.position;\n            }\n        });\n    };\n    Snake.prototype.render = function () {\n        this.segments.forEach(function (segment) {\n            segment.clear();\n            segment.render();\n        });\n    };\n    Snake.prototype.createSegment = function (color, size) {\n        var position;\n        if (this.lastSegment) {\n            position = this.lastSegment.position.move(this.direction.reverse());\n        }\n        else {\n            position = new Coordinate(600 / 2, 300 / 2);\n        }\n        return new Segment(this.context, position, size, color);\n    };\n    Snake.prototype.addSegment = function (segment) {\n        this.segments.push(segment);\n        this.lastSegment = segment;\n    };\n    Snake.prototype.resetSegments = function () {\n        this.segments = [];\n        this.lastSegment = null;\n    };\n    return Snake;\n}());\nexport { Snake };\nvar Segment = /** @class */ (function () {\n    function Segment(context, position, size, color) {\n        this.context = context;\n        this.position = position;\n        this.size = size;\n        this.color = color;\n    }\n    Segment.prototype.move = function (position) {\n        this.position = position;\n    };\n    Segment.prototype.clear = function () {\n        this.context.fillStyle = 'white';\n        this.context.fillRect(this.position.x + 2, this.position.y + 2, this.size, this.size);\n    };\n    Segment.prototype.render = function () {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(this.position.x + 2, this.position.y + 2, this.size, this.size);\n    };\n    return Segment;\n}());\n","var Direction = /** @class */ (function () {\n    function Direction(type, x, y) {\n        this.type = type;\n        this.x = x;\n        this.y = y;\n        Direction.cache.set(type, this);\n    }\n    Direction.get = function (type) {\n        var direction = Direction.cache.get(type);\n        if (!direction) {\n            throw new TypeError('Unknown direction type.');\n        }\n        return direction;\n    };\n    Direction.right = function () {\n        if (Direction.cache.has(DirectionType.RIGHT)) {\n            return Direction.get(DirectionType.RIGHT);\n        }\n        return new Direction(DirectionType.RIGHT, 30, 0);\n    };\n    Direction.left = function () {\n        if (Direction.cache.has(DirectionType.LEFT)) {\n            return Direction.get(DirectionType.LEFT);\n        }\n        return new Direction(DirectionType.LEFT, -30, 0);\n    };\n    Direction.up = function () {\n        if (Direction.cache.has(DirectionType.UP)) {\n            return Direction.get(DirectionType.UP);\n        }\n        return new Direction(DirectionType.UP, 0, -30);\n    };\n    Direction.down = function () {\n        if (Direction.cache.has(DirectionType.DOWN)) {\n            return Direction.get(DirectionType.DOWN);\n        }\n        return new Direction(DirectionType.DOWN, 0, 30);\n    };\n    Direction.prototype.reverse = function () {\n        if (!Direction.reverseMap) {\n            Direction.reverseMap = new Map([\n                [DirectionType.LEFT, Direction.right],\n                [DirectionType.RIGHT, Direction.left],\n                [DirectionType.UP, Direction.down],\n                [DirectionType.DOWN, Direction.up],\n            ]);\n        }\n        var reverseDirection = Direction.reverseMap.get(this.type);\n        if (!reverseDirection) {\n            throw new Error('Direction has no reverse (?)');\n        }\n        return reverseDirection.call(Direction);\n    };\n    Direction.prototype.equals = function (direction) {\n        return this === direction;\n    };\n    Direction.prototype.isReverse = function (direction) {\n        return this.reverse() === direction;\n    };\n    Direction.cache = new Map();\n    return Direction;\n}());\nexport { Direction };\nvar DirectionType;\n(function (DirectionType) {\n    DirectionType[\"LEFT\"] = \"left\";\n    DirectionType[\"RIGHT\"] = \"right\";\n    DirectionType[\"UP\"] = \"up\";\n    DirectionType[\"DOWN\"] = \"down\";\n})(DirectionType || (DirectionType = {}));\n","var Fruit = /** @class */ (function () {\n    function Fruit(context, position, color) {\n        this.context = context;\n        this.position = position;\n        this.color = color;\n    }\n    Fruit.prototype.render = function () {\n        this.context.fillStyle = this.color;\n        this.context.fillRect(this.position.x + 2, this.position.y + 2, 26, 26);\n    };\n    Fruit.prototype.collidesWith = function (position) {\n        return this.position.equals(position);\n    };\n    return Fruit;\n}());\nexport { Fruit };\n","var Score = /** @class */ (function () {\n    function Score(node, value) {\n        this.node = node;\n        this.value = value;\n    }\n    Score.prototype.increment = function () {\n        this.value += 1;\n        this.update();\n    };\n    Score.prototype.getValue = function () {\n        return this.value;\n    };\n    Score.prototype.update = function () {\n        this.node.innerHTML = this.value.toString();\n    };\n    Score.prototype.reset = function () {\n        this.value = 0;\n        this.update();\n    };\n    return Score;\n}());\nexport { Score };\n","import { Snake } from \"./snake\";\nimport { Direction } from \"./direction\";\nimport { Fruit } from \"./fruit\";\nimport { Coordinate } from \"./coordinate\";\nimport { Score } from \"./score\";\nvar Engine = /** @class */ (function () {\n    function Engine(canvas, score, localization, settings, history) {\n        this.localization = localization;\n        this.settings = settings;\n        this.history = history;\n        this.fruit = null;\n        this.inputQueue = [];\n        this.running = false;\n        var context = canvas.getContext('2d');\n        if (!context) {\n            throw new Error('Failed to acquire canvas context.');\n        }\n        this.context = context;\n        this.snake = new Snake(this.context, Direction.right());\n        this.score = new Score(score, 0);\n    }\n    Engine.prototype.initialize = function (settings) {\n        window.focus();\n        this.settings = settings;\n        this.fruit = null;\n        this.context.reset();\n        this.score.reset();\n        this.snake.direction = Direction.right();\n        this.snake.resetSegments();\n        this.snake.addSegment(this.snake.createSegment(this.settings.colors.head, 26));\n        for (var i = 0; i < 2; i += 1) {\n            this.snake.addSegment(this.snake.createSegment(this.settings.colors.body, 26));\n        }\n        this.renderField();\n    };\n    Engine.prototype.run = function () {\n        this.running = true;\n        window.addEventListener('keydown', this.update.bind(this));\n        window.requestAnimationFrame(this.updateController.bind(this));\n        window.requestAnimationFrame(window.setTimeout.bind(window, this.tick.bind(this), 1000 / this.settings.speed));\n    };\n    Engine.prototype.stop = function () {\n        this.running = false;\n        window.removeEventListener('keydown', this.update.bind(this));\n    };\n    Engine.prototype.update = function (event) {\n        var currentDirection = this.inputQueue.at(-1) || this.snake.direction;\n        var direction = KeyboardControlMap.getDirection(event.code);\n        if (!direction) {\n            return;\n        }\n        if (direction.equals(currentDirection) || direction.isReverse(currentDirection)) {\n            return;\n        }\n        this.inputQueue.push(direction);\n    };\n    Engine.prototype.tick = function () {\n        var _this = this;\n        if (!this.running) {\n            return;\n        }\n        if (this.inputQueue.length > 0) {\n            var direction = this.inputQueue.shift();\n            if (direction) {\n                this.snake.direction = direction;\n            }\n        }\n        this.snake.update();\n        if (this.checkCollision()) {\n            this.finalizeSession(this.localization.getMessage('GAME_OVER'));\n            this.snake.render();\n            return;\n        }\n        if (this.snake.segments.length == 200) {\n            this.finalizeSession(this.localization.getMessage('VICTORY'));\n            this.snake.render();\n            return;\n        }\n        this.snake.render();\n        if (!this.fruit) {\n            var randomPosition_1;\n            do {\n                randomPosition_1 = new Coordinate(Math.max(Math.round(Math.random() * 19) * 30, 30), Math.max(Math.round(Math.random() * 9) * 30, 30));\n            } while (this.snake.segments.some(function (segment) { return randomPosition_1.equals(segment.position); }));\n            this.fruit = new Fruit(this.context, randomPosition_1, this.settings.colors.fruit);\n            this.fruit.render();\n        }\n        if (this.snake.segments.some(function (segment) { var _a; return !!((_a = _this.fruit) === null || _a === void 0 ? void 0 : _a.collidesWith(segment.position)); })) {\n            this.snake.addSegment(this.snake.createSegment(this.settings.colors.body, 26));\n            this.score.increment();\n            this.fruit = null;\n        }\n        window.requestAnimationFrame(window.setTimeout.bind(window, this.tick.bind(this), 1000 / this.settings.speed));\n    };\n    Engine.prototype.checkCollision = function () {\n        var _this = this;\n        return this.snake.segments.some(function (segment) {\n            if (segment.position.x < Boundary.LOWEST_HORIZONTAL || segment.position.x >= Boundary.HIGHEST_HORIZONTAL) {\n                return true;\n            }\n            if (segment.position.y < Boundary.LOWEST_VERTICAL || segment.position.y >= Boundary.HIGHEST_VERTICAL) {\n                return true;\n            }\n            return _this.snake.segments.some(function (other) { return (segment !== other &&\n                segment.position.equals(other.position)); });\n        });\n    };\n    Engine.prototype.renderField = function () {\n        this.context.strokeStyle = this.settings.colors.border;\n        this.context.beginPath();\n        for (var x = Boundary.LOWEST_HORIZONTAL; x <= Boundary.HIGHEST_HORIZONTAL; x += 30) {\n            this.context.moveTo(x, Boundary.LOWEST_VERTICAL);\n            this.context.lineTo(x, Boundary.HIGHEST_VERTICAL);\n            this.context.stroke();\n        }\n        for (var y = Boundary.LOWEST_VERTICAL; y <= Boundary.HIGHEST_VERTICAL; y += 30) {\n            this.context.moveTo(Boundary.LOWEST_HORIZONTAL, y);\n            this.context.lineTo(Boundary.HIGHEST_HORIZONTAL, y);\n            this.context.stroke();\n        }\n    };\n    Engine.prototype.finalizeSession = function (message) {\n        var retry = confirm(message);\n        this.history.register(new Date(), this.score.getValue());\n        if (!retry) {\n            return;\n        }\n        this.initialize(this.settings);\n    };\n    Engine.prototype.updateController = function () {\n        if (!this.running) {\n            return;\n        }\n        window.requestAnimationFrame(this.updateController.bind(this));\n        var controller = navigator.getGamepads().find(function (gamepad) { return !!gamepad; });\n        if (!controller) {\n            return;\n        }\n        var currentDirection = this.inputQueue.at(-1) || this.snake.direction;\n        var direction;\n        var _a = controller.axes.map(Math.round), horizontalAxis = _a[0], verticalAxis = _a[1];\n        if (horizontalAxis === 1) {\n            direction = Direction.right();\n        }\n        if (horizontalAxis === -1) {\n            direction = Direction.left();\n        }\n        if (verticalAxis === 1) {\n            direction = Direction.down();\n        }\n        if (verticalAxis === -1) {\n            direction = Direction.up();\n        }\n        if (!direction) {\n            var index = controller.buttons.findIndex(function (button) { return button.pressed; });\n            var controllerMap = new Map([\n                [12, Direction.up()],\n                [13, Direction.down()],\n                [14, Direction.left()],\n                [15, Direction.right()],\n            ]);\n            if (!controllerMap.has(index)) {\n                return;\n            }\n            direction = controllerMap.get(index);\n        }\n        if (!direction) {\n            return;\n        }\n        if (direction.equals(currentDirection) || direction.isReverse(currentDirection)) {\n            return;\n        }\n        this.inputQueue.push(direction);\n    };\n    return Engine;\n}());\nexport { Engine };\nvar Boundary;\n(function (Boundary) {\n    Boundary[Boundary[\"LOWEST_VERTICAL\"] = 0] = \"LOWEST_VERTICAL\";\n    Boundary[Boundary[\"LOWEST_HORIZONTAL\"] = 0] = \"LOWEST_HORIZONTAL\";\n    Boundary[Boundary[\"HIGHEST_VERTICAL\"] = 300] = \"HIGHEST_VERTICAL\";\n    Boundary[Boundary[\"HIGHEST_HORIZONTAL\"] = 600] = \"HIGHEST_HORIZONTAL\";\n})(Boundary || (Boundary = {}));\nvar KeyboardControlMap = /** @class */ (function () {\n    function KeyboardControlMap() {\n    }\n    KeyboardControlMap.getDirection = function (keyCode) {\n        var key = Array\n            .from(KeyboardControlMap.map.keys())\n            .find(function (keyCodes) { return keyCodes.includes(keyCode); });\n        if (!key) {\n            return null;\n        }\n        return KeyboardControlMap.map.get(key) || null;\n    };\n    KeyboardControlMap.map = new Map([\n        [['KeyW', 'ArrowUp'], Direction.up()],\n        [['KeyA', 'ArrowLeft'], Direction.left()],\n        [['KeyD', 'ArrowRight'], Direction.right()],\n        [['KeyS', 'ArrowDown'], Direction.down()]\n    ]);\n    return KeyboardControlMap;\n}());\n","import * as messages from '../asset/l10n/messages.json';\nvar Localization = /** @class */ (function () {\n    function Localization() {\n        this.locale = new Intl.Locale(navigator.language);\n        this.dateFormatter = new Intl.DateTimeFormat(this.locale.maximize().language, {\n            dateStyle: 'medium',\n            timeStyle: 'medium',\n        });\n        var dictionary = new Map();\n        Object.entries(messages).forEach(function (entry) {\n            var language = entry[0], languageMessages = entry[1];\n            var map = new Map();\n            Object.entries(languageMessages).forEach(function (entry) {\n                var code = entry[0], localized = entry[1];\n                map.set(code, localized);\n            });\n            dictionary.set(language, map);\n        });\n        this.dictionary = dictionary;\n    }\n    Localization.prototype.initialize = function (querySelector) {\n        var _this = this;\n        return new Promise(function (resolve) {\n            var elements = document.querySelectorAll(querySelector);\n            elements.forEach(function (element) {\n                element.innerHTML = element.innerHTML.replace(/\\{\\{(.*)}}/, function (matches, p1) { return _this.getMessage(p1); });\n            });\n            resolve();\n        });\n    };\n    Localization.prototype.getMessage = function (code) {\n        var info = this.locale.maximize();\n        var language = this.dictionary.has(info.language) ? info.language : Localization.DEFAULT_LANGUAGE;\n        var locales = this.dictionary.get(language);\n        if (!(locales === null || locales === void 0 ? void 0 : locales.has(code))) {\n            return code;\n        }\n        return locales.get(code) || code;\n    };\n    Localization.prototype.formatDate = function (date) {\n        return this.dateFormatter.format(date);\n    };\n    Localization.DEFAULT_LANGUAGE = 'en';\n    return Localization;\n}());\nexport { Localization };\n","var Settings = /** @class */ (function () {\n    function Settings(colors, speed) {\n        this.colors = colors;\n        this.speed = speed;\n    }\n    Settings.createFromNode = function (node) {\n        var form = new FormData(node);\n        return new Settings(new ColorScheme(form.get('head_color'), form.get('body_color'), form.get('fruit_color'), form.get('border_color')), Number.parseInt(form.get('speed')));\n    };\n    return Settings;\n}());\nexport { Settings };\nvar ColorScheme = /** @class */ (function () {\n    function ColorScheme(head, body, fruit, border) {\n        this.head = head;\n        this.body = body;\n        this.fruit = fruit;\n        this.border = border;\n    }\n    return ColorScheme;\n}());\n","var History = /** @class */ (function () {\n    function History(scoreBoard, localization) {\n        this.scoreBoard = scoreBoard;\n        this.localization = localization;\n    }\n    History.prototype.reset = function () {\n        localStorage.removeItem(History.HISTORY_KEY);\n        this.clear();\n    };\n    History.prototype.register = function (timestamp, score) {\n        var items = this.retrieve();\n        items.push(new Item(timestamp, score));\n        items = items\n            .sort(function (item, other) { return other.score - item.score; })\n            .slice(0, 10);\n        this.persist(items);\n        this.render();\n    };\n    History.prototype.clear = function () {\n        var _this = this;\n        var entries = this.scoreBoard.querySelectorAll(\"[data-type=\".concat(Item.DATA_TYPE, \"]\"));\n        Array.from(entries).forEach(function (entry) {\n            _this.scoreBoard.removeChild(entry);\n        });\n    };\n    History.prototype.render = function () {\n        var _this = this;\n        this.clear();\n        this.retrieve()\n            .sort(function (item, other) { return other.score - item.score; })\n            .forEach(function (item, index) {\n            _this.scoreBoard.appendChild(item.render(_this.localization, index + 1));\n        });\n    };\n    History.prototype.retrieve = function () {\n        var history = localStorage.getItem(History.HISTORY_KEY);\n        if (!history) {\n            return [];\n        }\n        var items = JSON.parse(history);\n        return items.map(Item.create);\n    };\n    History.prototype.persist = function (items) {\n        localStorage.setItem(History.HISTORY_KEY, JSON.stringify(items.map(function (item) {\n            return {\n                timestamp: item.timestamp.valueOf(),\n                score: item.score\n            };\n        })));\n    };\n    History.HISTORY_KEY = 'history';\n    return History;\n}());\nexport { History };\nvar Item = /** @class */ (function () {\n    function Item(timestamp, score) {\n        this.timestamp = timestamp;\n        this.score = score;\n    }\n    Item.create = function (item) {\n        return new Item(new Date(item.timestamp), item.score);\n    };\n    Item.prototype.render = function (localization, position) {\n        var row = document.createElement('tr');\n        row.dataset.type = Item.DATA_TYPE;\n        switch (position) {\n            case 1:\n                row.classList.add('bg-yellow-400');\n                break;\n            case 2:\n                row.classList.add('bg-gray-400');\n                break;\n            case 3:\n                row.classList.add('bg-orange-400');\n                break;\n        }\n        row.appendChild(this.renderTimestamp(localization));\n        row.appendChild(this.renderScore());\n        return row;\n    };\n    Item.prototype.renderScore = function () {\n        var score = document.createElement('td');\n        score.classList.add('border', 'border-solid', 'border-black', 'p-1', 'text-right', 'px-3');\n        score.innerText = this.score.toString();\n        return score;\n    };\n    Item.prototype.renderTimestamp = function (localization) {\n        var timestamp = document.createElement('td');\n        timestamp.classList.add('border', 'border-solid', 'border-black', 'p-1', 'px-3');\n        timestamp.innerText = localization.formatDate(this.timestamp);\n        return timestamp;\n    };\n    Item.DATA_TYPE = 'history-entry';\n    return Item;\n}());\n","import { Engine } from './engine';\nimport { Localization } from \"./localization\";\nimport { Settings } from \"./settings\";\nimport { History } from \"./history\";\nexport var Freezemage = {\n    Engine: Engine,\n    Localization: Localization,\n    Settings: Settings,\n    History: History\n};\n"],"names":[],"sourceRoot":""}